#!/bin/bash
# GitHub Sync Script for Splunk Configuration
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Configuration
SPLUNK_HOME="{{ splunk_home }}"
GITHUB_DIR="${SPLUNK_HOME}/etc/github"
REPO_DIR="${GITHUB_DIR}/config-repo"
CONFIG_PATH="{{ github_config_path }}"
BRANCH="{{ github_branch }}"

# Log function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a /var/log/github-sync.log
}

log "Starting GitHub configuration sync"

# Change to repository directory
cd "${REPO_DIR}"

# Fetch latest changes
log "Fetching latest changes from GitHub"
if ! git fetch origin "${BRANCH}"; then
    log "ERROR: Failed to fetch from GitHub"
    exit 1
fi

# Check if there are updates
LOCAL_COMMIT=$(git rev-parse HEAD)
REMOTE_COMMIT=$(git rev-parse "origin/${BRANCH}")

if [[ "${LOCAL_COMMIT}" == "${REMOTE_COMMIT}" ]]; then
    log "No updates available, repository is up to date"
    exit 0
fi

log "Updates detected, pulling changes"

# Pull latest changes
if ! git pull origin "${BRANCH}"; then
    log "ERROR: Failed to pull from GitHub"
    exit 1
fi

# Sync configuration files
if [[ -d "${REPO_DIR}/${CONFIG_PATH}" ]]; then
    log "Syncing configuration files from ${CONFIG_PATH}"
    
    # Copy configuration files
    find "${REPO_DIR}/${CONFIG_PATH}" -name "*.conf" -type f | while read -r config_file; do
        filename=$(basename "${config_file}")
        dest_file="${SPLUNK_HOME}/etc/system/local/${filename}"
        
        # Backup existing file
        if [[ -f "${dest_file}" ]]; then
            cp "${dest_file}" "${dest_file}.backup.$(date +%Y%m%d_%H%M%S)"
        fi
        
        # Copy new configuration
        cp "${config_file}" "${dest_file}"
        chown {{ splunk_user }}:{{ splunk_group }} "${dest_file}"
        chmod 644 "${dest_file}"
        
        log "Updated configuration: ${filename}"
    done
    
    # Sync deployment apps
    if [[ -d "${REPO_DIR}/${CONFIG_PATH}/apps" ]]; then
        log "Syncing deployment apps"
        
        find "${REPO_DIR}/${CONFIG_PATH}/apps" -mindepth 1 -maxdepth 1 -type d | while read -r app_dir; do
            app_name=$(basename "${app_dir}")
            dest_app_dir="${SPLUNK_HOME}/etc/deployment-apps/${app_name}"
            
            # Create app directory if it doesn't exist
            mkdir -p "${dest_app_dir}"
            
            # Sync app files
            rsync -av --delete "${app_dir}/" "${dest_app_dir}/"
            chown -R {{ splunk_user }}:{{ splunk_group }} "${dest_app_dir}"
            
            log "Updated deployment app: ${app_name}"
        done
        
        # Reload deployment server
        log "Reloading deployment server"
        if ! sudo -u {{ splunk_user }} "${SPLUNK_HOME}/bin/splunk" reload deploy-server; then
            log "WARNING: Failed to reload deployment server"
        fi
    fi
else
    log "WARNING: Configuration path ${CONFIG_PATH} not found in repository"
fi

log "GitHub sync completed successfully"
log "Repository is now at commit: $(git rev-parse HEAD)"