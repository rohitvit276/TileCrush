#!/bin/bash
# Splunk Backup Script
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Configuration
SPLUNK_HOME="{{ splunk_home }}"
BACKUP_LOCATION="{{ backup_location }}"
RETENTION_DAYS="{{ backup_retention_days }}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="splunk_backup_${TIMESTAMP}.tar.gz"

# Create backup directory if it doesn't exist
mkdir -p "${BACKUP_LOCATION}"

# Log function
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "${BACKUP_LOCATION}/backup.log"
}

log "Starting Splunk backup process"

# Stop Splunk before backup
log "Stopping Splunk services"
systemctl stop splunk || true

# Create backup archive
log "Creating backup archive: ${BACKUP_NAME}"
cd "${SPLUNK_HOME}"
tar -czf "${BACKUP_LOCATION}/${BACKUP_NAME}" \
    --exclude='var/lib/splunk/fishbucket' \
    --exclude='var/run/splunk' \
    --exclude='var/log/splunk' \
    etc/ bin/ share/

# Start Splunk after backup
log "Starting Splunk services"
systemctl start splunk

# Clean up old backups
log "Cleaning up backups older than ${RETENTION_DAYS} days"
find "${BACKUP_LOCATION}" -name "splunk_backup_*.tar.gz" -mtime +${RETENTION_DAYS} -delete

log "Backup completed successfully: ${BACKUP_LOCATION}/${BACKUP_NAME}"

# Verify backup
if [[ -f "${BACKUP_LOCATION}/${BACKUP_NAME}" ]]; then
    BACKUP_SIZE=$(du -h "${BACKUP_LOCATION}/${BACKUP_NAME}" | cut -f1)
    log "Backup verification: SUCCESS (Size: ${BACKUP_SIZE})"
    exit 0
else
    log "Backup verification: FAILED"
    exit 1
fi